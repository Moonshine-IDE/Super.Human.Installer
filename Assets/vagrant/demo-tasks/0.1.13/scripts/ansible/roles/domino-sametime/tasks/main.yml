---
## Install Guide here: https://help.hcltechsw.com/sametime/12/admin/installing.html
-
  name: "Creating installation directories for Sametime"
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ installer_dir }}/sametime/archives"
    - "{{ installer_dir }}/sametime/Sametime"

- 
  name: "Checking if Sametime {{ sametime_version }} installer is at {{ installer_dir }}/sametime/archives/{{ sametime_archive }}"
  register: sametime_installer_check
  stat:
    path: "{{ installer_dir }}/sametime/archives/{{ sametime_archive }}"
    get_md5: no

- 
  name: "Checking if Sametime {{ sametime_version }} is installed"
  register: sametime_installed_check
  stat:
    path: "{{ completed_dir }}/sametime_installed"
    get_md5: no

#- 
#  name: "Downloading Sametime {{ sametime_version }} from {{ domino_installer_base_url }}"
#  register: sametimeresult
#  until: "sametimeresult is not failed"
#  retries: 3
#  get_url:
#    url: "{{ domino_installer_base_url }}/Sametime/{{ sametime_version }}/{{ sametime_archive }}"
#    dest: "{{ installer_dir }}/sametime/archives/{{ sametime_archive }}"
#    username: "{{ domino_installer_url_user }}"
#    password: "{{ secrets.domino_installer_url_pass }}"
#  when: sametime_installer_check.stat.exists == false and sametime_installed_check.stat.exists == false

-
  name: "Extracting Sametime {{ sametime_version }} from {{ sametime_archive }}"
  when:  sametime_installed_check.stat.exists == false
  unarchive:
    mode: "a+x"
    owner: "{{ domino_user }}"
    group: "{{ domino_group }}"
    src: "{{ installer_dir }}/sametime/archives/{{ sametime_archive }}"
    dest: "{{ installer_dir }}/sametime/Sametime"
    creates: "{{ installer_dir }}/sametime/Sametime/Sametime-{{ sametime_version }}-for-domino-1201-linux"
    remote_src: true

- 
  name: "Stopping Domino for Sametime Installation"
  when: sametime_installed_check.stat.exists == false
  become: true
  service:
    name: domino
    state: stopped
    enabled: yes

-
  name: "Configuring Sametime and Starting Service"
  when: sametime_installed_check.stat.exists == false
  when: false
  shell: "{{ item }}"
  become: true
  args:
    executable: "/bin/bash"
    chdir: "{{ installer_dir }}/sametime/Sametime/Sametime-{{ sametime_version }}/linux"
  with_items:
    - ./install silent
    - touch {{ completed_dir }}/sametime_install

- 
  name: "Registering sametime installation Output"
  shell: cat /var/log/volt_install_*.log
  register: sametime_install

- 
  name: "Outputting Sametime installation logs"
  when: sametime_installed_check.stat.exists == false
  debug: 
    var: sametime_install.stdout_lines

- 
  name: "Creating Database chatlogging for Sametime"
  when: sametime_installed_check.stat.exists == false
  mongodb_user:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    login_port: "27017"
    database: admin
    user: sametimeUser
    password: sametime
    state: present
    roles:
      - db: chatlogging
        role: readWrite
      - db: mobileOffline
        role: readWrite
      - db: meeting
        role: readWrite
      - db: meeting
        role: dbAdmin
      - db: admin
        role: userAdminAnyDatabase

- 
  name: "Initializing Databases"
  when: sametime_installed_check.stat.exists == false
  community.mongodb.mongodb_index:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    login_port: "27017"
    indexes:
      - database: chatlogging
        collection: "EVENTS"
        keys:
          _id: 1
        options:
          name: "dummy"
        state: present
      - database: chatlogging
        collection: "SESSIONS"
        options:
          name: "dummy"
        keys:
          _id: 1
        state: present

#- 
#  name: "Initializing Databases"
#  community.mongodb.mongodb_shell:
#    mongo_cmd: mongosh
#    db: chatlogging
#    login_user: "{{ mongodb_admin_user }}"
#    login_password: "{{ mongodb_admin_password }}"
#    login_port: "27017"
#    eval: "{{ item }}"
#  with_items:
#    - 'db.EVENTS.insertOne({"_id" : "dummy"})'
#    - 'db.SESSIONS.insertOne({"_id" : "dummy"})'

-

  name: "Stopping MongoDB"
  when: sametime_installed_check.stat.exists == false
  become: true
  service:
    name: mongod
    state: stopped
    enabled: yes

- 
  name: "Binding to all interfaces and Setting Replication set in MongoDB"
  lineinfile:
    path: "{{ item.dir }}"
    regexp:  "{{ item.regexp }}"
    insertafter:  "{{ item.insertafter }}"
    create: true
    line: "{{ item.line }}"
  with_items:
    - { regexp: "^#replication:", insertafter: "", line: 'replication:', dir: "/etc/mongod.conf" }
    - { regexp: "  replSetName: rs0", insertafter: "replication:", line: '  replSetName: rs0', dir: "/etc/mongod.conf" }
    - { regexp: "  bindIpAll: true", insertafter: "bindIp: 127.0.0.1", line: '  bindIpAll: true', dir: "/etc/mongod.conf" }

- 

  name: "Starting MongoDB"
  when: sametime_installed_check.stat.exists == false
  service:
    name: mongod
    state: started
    enabled: yes

- 
  name: "Initializing Databases"
  when: sametime_installed_check.stat.exists == false
  community.mongodb.mongodb_shell:
    mongo_cmd: mongosh
    db: admin
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    login_port: "27017"
    eval: "{{ item }}"
  with_items:
    - 'rs.initiate()'

- 
  name: "Ensuring replicaset rs0 exists"
  when: sametime_installed_check.stat.exists == false
  community.mongodb.mongodb_replicaset:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    login_port: "27017"
    replica_set: rs0
    members: localhost:27017
    validate: no

- 
  name: "Starting Domino"
  when: sametime_installed_check.stat.exists == false
  service:
    name: domino
    state: started
    enabled: yes

-
  name: "Setting Sametime to installed"
  when: sametime_installed_check.stat.exists == False
  file:
    path: "{{ item }}"
    state: touch
  with_items:
    - "{{ completed_dir }}/sametime_installed"