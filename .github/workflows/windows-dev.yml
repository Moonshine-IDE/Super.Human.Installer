name: Windows Dev
  
on:
  - workflow_dispatch
  - workflow_call
  
jobs:
  build:
    name: Build
    runs-on: windows-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          lfs: true
          
      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Read version
        id: readversion
        uses: mavrosxristoforos/get-xml-info@1.1.1
        with:
          xml-file: 'project.xml'
          xpath: '/project/meta/@version'

      - name: Set up Haxe
        uses: krdlab/setup-haxe@v1.5.1
        with:
          haxe-version: 4.3.3

      - name: Install dependencies
        run: | 
          haxelib install hxcpp
          git clone --recursive --depth 1 --branch develop https://github.com/openfl/lime
          haxelib dev lime lime
          haxelib install format
          haxelib install hxp
          haxelib git lime-samples https://github.com/openfl/lime-samples
          haxelib git openfl https://github.com/openfl/openfl.git develop
          haxelib run openfl setup
          haxelib git feathersui https://github.com/feathersui/feathersui-openfl.git
          haxelib git champaign https://github.com/Moonshine-IDE/Champaign.git

      - name: Build project
        run: |
          haxelib run openfl build project.xml windows -debug -Dlogverbose -Dlogcolor -Dverbose_process_logs -DCHAMPAIGN_DEBUG=true -Dgitsha=${{ github.sha }} -Dgitbranch=${{ github.ref_name }}

      - name: Create NSIS installer
        run: |
          makensis /DPRODUCT_VERSION=${{ steps.readversion.outputs.info }} Templates/installer/windows-installer-dev.nsi

      # Sign installer

      - name: Sign installer
        uses: Moonshine-IDE/digicert-sign-action@v1.0
        with:
          bin-path: Templates/installer/SuperHumanInstallerDev-Setup.exe
          sm-host: ${{ secrets.SM_HOST }}
          sm-api-key: ${{ secrets.SM_API_KEY }}
          sm-client-cert-file-b64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
          sm-client-cert-password: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
          sm-code-signing-cert-sha1-hash: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}
          
      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: SuperHumanInstallerDev-Setup
          path: Templates/installer/SuperHumanInstallerDev-Setup.exe

      - name: Copy files to choco
        run: |
          cp Templates/installer/SuperHumanInstallerDev-Setup.exe Templates/chocolatey-dev/tools/
          cp LICENSE.MD Templates/chocolatey-dev/

      - name: Create chocko package
        run: |
          choco pack `
            --version ${{ steps.readversion.outputs.info }} `
            --out Templates/chocolatey-dev/ `
            Templates/chocolatey-dev/SuperHumanInstallerDev.nuspec
          mv `
            .\Templates\chocolatey-dev\superhumaninstallerdev*.nupkg `
            .\Templates\chocolatey-dev\SuperHumanInstallerDev-Choco.nupkg

      - name: Upload choco package
        uses: actions/upload-artifact@v3
        with:
          name: SuperHumanInstallerDev-Choco
          path: Templates/chocolatey-dev/SuperHumanInstallerDev-Choco.nupkg
