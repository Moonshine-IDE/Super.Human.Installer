---
-
  name: "Creating Installation Directories"
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ service_user }}"
  with_items:
    - "{{ installer_dir }}/restapi/rest"
    - "{{ installer_dir }}/restapi/archives"

- 
  name: "Checking if the Rest Interface deployed"
  register: rest_interface_deployed
  stat:
    path: "{{ rest_app_home_dir }}/environment"
    get_md5: no

-
  name: "Downloading Domino VagrantCRUD API {{ rest_vagrant_crud_version }}"
  when: rest_interface_deployed.stat.exists == false
  get_url:
    url: "https://github.com/Moonshine-IDE/Vagrant-REST-Interface/releases/download/{{ rest_vagrant_crud_version }}/{{ rest_vagrant_crud_archive }}"
    dest: "{{ installer_dir }}/restapi/archives/{{ rest_vagrant_crud_archive }}"

-
  name: "Extracting Domino VagrantCRUD API  {{ rest_vagrant_crud_version }} from {{ rest_vagrant_crud_archive }}"
  when: rest_interface_deployed.stat.exists == false
  unarchive:
    src: "{{ installer_dir }}/restapi/archives/{{ rest_vagrant_crud_archive }}"
    dest: "{{ installer_dir }}/restapi/rest"
    remote_src: true
    creates: "{{ installer_dir }}/restapi/rest/*.jar"

-
  name: "Making Rest Libraries and Binaries executable"
  when: rest_interface_deployed.stat.exists == false
  file:
    path: "{{ item  }}"
    owner: "{{ service_user }}"
    mode: "a+x"
  with_items:
    - "{{ installer_dir }}/restapi/rest/provision.sh"
    - "{{ installer_dir }}/restapi/rest/always.sh"

-
  name: "Installing Vagrant Rest interface"
  when: rest_interface_deployed.stat.exists == false
  file:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ service_user }}"
    mode: "0744"
  with_items:
    - { path: "{{ rest_app_home_dir }}", state: 'absent' }
    - { path: "/opt/domino/scripts", state: 'directory' }
    - { path: "{{ rest_app_home_dir }}", state: 'directory' }
    - { path: "{{ rest_app_home_dir }}/bin", state: 'directory' }
    - { path: "{{ rest_app_home_dir }}/log", state: 'directory' }
    - { path: "{{ rest_app_home_dir }}/config", state: 'directory' }

- 
  name: "Copying Rest interface Jar to working path"
  become: true
  when: rest_interface_deployed.stat.exists == false
  copy:
    src: "{{ installer_dir }}/restapi/rest/{{ rest_interface_jar }}"
    dest: "{{ rest_app_home_dir }}/bin/{{ rest_interface_jar }}"
    mode: "a+x"
    owner: "{{ service_user }}"
    remote_src: true

-
  name: "Placing Domino Specific Configuration and scripts"
  become: true
  when: domino_home_dir is defined and domino_install_dir is defined and rest_interface_deployed.stat.exists == false
  template:
    owner: "{{ item.owner }}"
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "a+x"
  loop:
    - { src: 'deploy_database.sh.j2', dest: '/opt/domino/scripts/deploy_database.sh', owner: '{{ service_user }}' }
    - { src: 'deploy_html.sh.j2', dest: '/opt/domino/scripts/deploy_html.sh', owner: '{{ service_user }}' }
    - { src: 'run_dxl_importer.sh.j2', dest: '/opt/domino/scripts/run_dxl_importer.sh', owner: '{{ service_user }}'}

-
  name: "Placing Configuration and scripts"
  become: true
  when:  rest_interface_deployed.stat.exists == false
  template:
    owner: "{{ item.owner }}"
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "a+x"
  loop:  
    - { src: 'rest_config.yml.j2', dest: '{{ rest_app_home_dir }}{{ rest_config_file }}', owner: '{{ service_user }}' }
    - { src: 'restapi.service.j2', dest: '/etc/systemd/system/restapi.service', owner: '{{ service_user }}' }
    - { src: 'environment.j2', dest: '{{ rest_app_home_dir }}/environment', owner: '{{ service_user }}' }

-
  name: "Starting Vagrant CRUD Rest API"
  when: rest_interface_deployed.stat.exists == false
  service:
    name: restapi
    state: started
    enabled: yes

- 
  name: "Checking Vagrant CRUD Rest API is listening on port {{ rest_guest_port }}"
  when: rest_interface_deployed.stat.exists == false
  wait_for:
    port: "{{ rest_guest_port }}"
    delay: 5
    timeout: 60
    msg: "Timeout waiting for {{ rest_guest_port }} to respond"
  register: port_check
