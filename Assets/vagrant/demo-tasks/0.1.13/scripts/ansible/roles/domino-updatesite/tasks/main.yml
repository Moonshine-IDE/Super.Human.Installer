---
-
  name: "Creating Installation Directories"
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ service_user }}"
  with_items:
    - "/vagrant/installers/update-site"
    - "{{ nsfodp_updatesite_path }}"
    - "{{ service_home_dir }}/.m2"

- 
  name: "Checking if the updatesite has been installed"
  register: updatesite_deployed
  stat:
    path: "{{ completed_dir }}/updatesite_deployed"
    get_md5: no

- 
  name: "Cloning updatesite to /vagrant/installers/update-site"
  become: true
  become_user: "{{ service_user }}"
  when: updatesite_deployed.stat.exists == false
  git:
    repo: "{{ updatesite_repo }}"
    dest: "/vagrant/installers/update-site/"
    force: no

-
  name: "Placing Configuration and scripts"
  when: updatesite_deployed.stat.exists == false
  become_user: "{{ service_user }}"
  become: true
  template:
    owner: "{{ item.owner }}"
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "a+x"
  loop:
    - { src: 'run_nsfodp.sh.j2', dest: '/opt/nsfodp/run_nsfodp.sh', owner: '{{ service_user }}' }
    - { src: 'maven_settings.xml.j2', dest: '{{ service_home_dir }}/.m2/settings.xml', owner: '{{ service_user }}' }

-
  name: "Installing updatesite with Maven {{ maven_version }}"
  when: updatesite_deployed.stat.exists == false
  shell: "{{ item.entry }}"
  become: true
  become_user: "{{ service_user }}"
  args:
    executable: "/bin/bash"
    chdir: "/vagrant/installers/update-site/generate-domino-update-site"
    creates: "{{ item.touches }}"
  environment:
    MAVEN_HOME: "{{ service_home_dir }}/.sdkman/candidates/maven/current"
  with_items:
    - { entry: "source {{ service_home_dir }}/.sdkman/bin/sdkman-init.sh && mvn install && touch {{ completed_dir }}/updatesite_installed", touches: "{{ completed_dir }}/updatesite_installed"}
    - { entry: "source {{ service_home_dir }}/.sdkman/bin/sdkman-init.sh && mvn org.openntf.p2:generate-domino-update-site:generateUpdateSite -Ddest={{ nsfodp_updatesite_path }} -Dsrc={{ domino_install_dir }} && touch {{ completed_dir }}/updatesite_deployed", touches: "{{ completed_dir }}/updatesite_deployed"}

- 
  name: "Archiving updatesite for later use: {{ nsfodp_updatesite_path }}.zip"
  when: updatesite_deployed.stat.exists == false
  archive:
    path: "{{ nsfodp_updatesite_path }}"
    dest: "{{ nsfodp_updatesite_path }}.zip"
    format: zip

