name: MacOS Dev
  
on:
  - workflow_dispatch
  - workflow_call
  
jobs:
  build:
    name: Build
    runs-on: macos-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          lfs: true
          
      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Read version
        id: readversion
        uses: mavrosxristoforos/get-xml-info@1.1.1
        with:
          xml-file: 'project.xml'
          xpath: '/project/meta/@version'

      - name: Set up Haxe
        uses: krdlab/setup-haxe@v1.5.1
        with:
          haxe-version: 4.3.1

      - name: Install dependencies
        run: | 
          haxelib install hxcpp
          haxelib git openfl https://github.com/openfl/openfl.git develop
          haxelib run openfl setup
          haxelib install feathersui
          haxelib git champaign https://github.com/Moonshine-IDE/Champaign.git

      - name: Build project
        run: |
          haxelib run openfl build project.xml mac -debug -Dlogverbose -Dlogcolor -Dverbose_process_logs -DCHAMPAIGN_DEBUG=true -Dgitsha=${{ github.sha }} -Dgitbranch=${{ github.ref_name }}
            
      - name: Create keychain
        env:
          MAC_KEYCHAIN_PASS: ${{ secrets.MAC_KEYCHAIN_PASS }}
        run: |
          security create-keychain -p "$MAC_KEYCHAIN_PASS" build.keychain
          echo "Keychain created"
          security set-keychain-settings -lut 21600 build.keychain
          echo "Keychain settings set"
          security default-keychain -s build.keychain
          echo "Keychain made default"
          security unlock-keychain -p "$MAC_KEYCHAIN_PASS" build.keychain  
          echo "Keychain unlocked"

      - name: Import certificates
        env:
          MAC_APPLICATION_CERTKEY: ${{ secrets.MAC_APPLICATION_CERTKEY }}
          MAC_INSTALLER_CERTKEY: ${{ secrets.MAC_INSTALLER_CERTKEY }}
          MAC_CERTKEY_PASS: ${{ secrets.MAC_CERTKEY_PASS }}
        run: |
          echo "$MAC_APPLICATION_CERTKEY" | base64 --decode > application_certkey.p12
          echo "$MAC_INSTALLER_CERTKEY" | base64 --decode > installer_certkey.p12

          security import ./application_certkey.p12 \
            -k build.keychain \
            -f pkcs12 \
            -P "$MAC_CERTKEY_PASS" \
            -T /usr/bin/codesign \
            -T /usr/bin/productsign

          security import ./installer_certkey.p12 \
            -k build.keychain \
            -f pkcs12 \
            -P "$MAC_CERTKEY_PASS" \
            -T /usr/bin/codesign \
            -T /usr/bin/productsign

      - name: Allow codesign and productsign to use keychain
        env:
          MAC_KEYCHAIN_PASS: ${{ secrets.MAC_KEYCHAIN_PASS }}
        run: |
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign:,productsign: \
            -s \
            -k "$MAC_KEYCHAIN_PASS" \
            build.keychain
          
      - name: Sign contents
        run: |
          codesign Export/Development/macos/bin/SuperHumanInstallerDev.app \
            --sign "Developer ID Application" \
            --options runtime \
            --force \
            --timestamp \
            --verbose \
            --deep
          
      - name: Verify singature
        run: |
          codesign Export/Development/macos/bin/SuperHumanInstallerDev.app \
            --display \
            --verbose \
            -r-

          codesign Export/Development/macos/bin/SuperHumanInstallerDev.app \
            --verify \
            --verbose

      - name: Create package
        env:
          VERSION: ${{ steps.readversion.outputs.info }}
        run: |
          productbuild \
            --version "$VERSION" \
            --product Templates/installer/SuperHumanInstaller.template.plist \
            --identifier net.prominic.genesis.superhumaninstallerdev \
            --component Export/Development/macos/bin/SuperHumanInstallerDev.app \
            /Applications \
            ./SuperHumanInstallerDev-Setup-Unsigned.pkg
            
      - name: Sign installer
        run: |
          productsign \
            --timestamp \
            --sign "Developer ID Installer" \
            ./SuperHumanInstallerDev-Setup-Unsigned.pkg \
            ./SuperHumanInstallerDev-Setup.pkg
          
      - name: "Notarize app bundle"
        env:
          MAC_NOTARIZATION_APPLE_ID: ${{ secrets.MAC_NOTARIZATION_APPLE_ID }}
          MAC_NOTARIZATION_TEAM_ID: ${{ secrets.MAC_NOTARIZATION_TEAM_ID }}
          MAC_NOTARIZATION_PASS: ${{ secrets.MAC_NOTARIZATION_PASS }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI
          echo "Create keychain profile"
          xcrun notarytool \
            store-credentials "notarytool-profile" \
            --apple-id "$MAC_NOTARIZATION_APPLE_ID" \
            --team-id "$MAC_NOTARIZATION_TEAM_ID" \
            --password "$MAC_NOTARIZATION_PASS"
          
          echo "Notarize app"
          xcrun notarytool \
            submit ./SuperHumanInstallerDev-Setup.pkg \
            --keychain-profile "notarytool-profile" \
            --wait
          
          echo "Attach staple"
          xcrun stapler \
            staple ./SuperHumanInstallerDev-Setup.pkg
          
      - name: Verify installer signature
        run: |
          pkgutil --check-signature ./SuperHumanInstallerDev-Setup.pkg
          spctl \
            --assess \
            --type install \
            --verbose \
            --verbose \
            ./SuperHumanInstallerDev-Setup.pkg
            
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with: 
          name: SuperHumanInstallerDev-Setup
          path: ./SuperHumanInstallerDev-Setup.pkg
