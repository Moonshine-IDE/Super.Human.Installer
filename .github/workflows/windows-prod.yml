name: Windows Prod
  
on:
  - workflow_dispatch
  - workflow_call
  
jobs:
  build:
    name: Build
    runs-on: windows-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          lfs: true
          
      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Read version
        id: readversion
        uses: mavrosxristoforos/get-xml-info@1.1.1
        with:
          xml-file: 'project.xml'
          xpath: '/project/meta/@version'

      - name: Set up Haxe
        uses: krdlab/setup-haxe@v1.5.1
        with:
          haxe-version: 4.3.1

      - name: Install dependencies
        run: | 
          haxelib install hxcpp
          haxelib git openfl https://github.com/openfl/openfl.git develop
          haxelib run openfl setup
          haxelib install feathersui
          haxelib git champaign https://github.com/Moonshine-IDE/Champaign.git

      - name: Build project
        run: |
          haxelib run openfl build project.xml windows -Dgitsha=${{ github.sha }} -Dgitbranch=${{ github.ref_name }}

      - name: Create NSIS installer
        run: |
          makensis /DPRODUCT_VERSION=${{ steps.readversion.outputs.info }} Templates/installer/windows-installer.nsi

      - name: Sign installer
        env:
          CODESIGN_PWD: ${{ secrets.WIN_PASS}}
          CODESIGN_BASE64: ${{ secrets.WIN_CERT}}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\cert.txt -Value $env:CODESIGN_BASE64
          certutil -decode certificate\cert.txt certificate\cert.pfx
          
          Import-PfxCertificate `
            -FilePath certificate\cert.pfx `
            -CertStoreLocation Cert:\CurrentUser\My `
            -Password (ConvertTo-SecureString -String $env:CODESIGN_PWD -Force -AsPlainText)
          
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x86/signtool.exe' sign `
            /debug `
            /fd SHA256 `
            /p $env:CODESIGN_PWD `
            /f certificate\cert.pfx `
            /td sha256 `
            /tr 'http://timestamp.digicert.com' `
            Templates/installer/SuperHumanInstaller-Setup.exe
          
          Remove-Item -Recurse -Force certificate

      - name: Verify signature
        if: ${{ false }}
        run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x86/signtool.exe' `
            verify Templates/installer/SuperHumanInstaller-Setup.exe

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: SuperHumanInstaller-Setup
          path: Templates/installer/SuperHumanInstaller-Setup.exe

      - name: Copy files to choco
        run: |
          cp Templates/installer/SuperHumanInstaller-Setup.exe Templates/chocolatey/tools/
          cp LICENSE.MD Templates/chocolatey/

      - name: Create chocko package
        run: |
          choco pack `
            --version ${{ steps.readversion.outputs.info }} `
            --out Templates/chocolatey/ `
            Templates/chocolatey/SuperHumanInstaller.nuspec
          mv `
            .\Templates\chocolatey\superhumaninstaller*.nupkg `
            .\Templates\chocolatey\SuperHumanInstaller-Choco.nupkg

      - name: Upload choco package
        uses: actions/upload-artifact@v3
        with:
          name: SuperHumanInstaller-Choco
          path: Templates/chocolatey/SuperHumanInstaller-Choco.nupkg
