---
-
  name: "Creating installation directories for domino-appdev-pack"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0644'
  with_items:
    - "{{ installer_dir }}/appdevpack/archives"
    - "{{ installer_dir }}/appdevpack/domino-appdev-pack"

-
  name: "Checking if domino-appdev-pack  installer is at appdevpack/archives/{{ appdevpack_archive }}"
  register: domino_server_installer_check
  ansible.builtin.stat:
    path: "{{ installer_dir }}/appdevpack/archives/{{ appdevpack_archive }}"
    get_md5: false

-
  name: "Checking if domino-appdev-pack is installed: {{ appdevpack_version }}"
  register: appdevpack_installed_check
  ansible.builtin.stat:
    path: "{{ completed_dir }}/appdevpack_install"
    get_md5: false

# -
#   name: "Downloading domino-appdev-pack from {{ domino_installer_base_url }}"
#   register: appdevpackresult
#   until: "appdevpackresult is not failed"
#   retries: 3
#   ansible.builtin.get_url:
#     url: "{{ domino_installer_base_url }}/domino-appdev-pack/{{ appdevpack_archive }}"
#     dest: "{{ installer_dir }}/appdevpack/archives/{{ appdevpack_archive }}"
#     username: "{{ domino_installer_url_user }}"
#     password: "{{ secrets.domino_installer_url_pass }}"
#   when: not domino_server_installer_check.stat.exists and not appdevpack_installed_check.stat.exists

-
  name: "Extracting domino-appdev-pack from {{ appdevpack_archive }}"
  when: not appdevpack_installed_check.stat.exists
  ansible.builtin.unarchive:
    mode: "a+x"
    owner: "{{ domino_user }}"
    group: "{{ domino_group }}"
    src: "{{ installer_dir }}/appdevpack/archives/{{ appdevpack_archive }}"
    dest: "{{ installer_dir }}/appdevpack/domino-appdev-pack"
    creates: "{{ installer_dir }}/appdevpack/domino-appdev-pack/adpconfig.ntf"
    remote_src: true

-
  name: "Stopping Domino for domino-appdev-pack Installation"
  when: not appdevpack_installed_check.stat.exists
  become: true
  ansible.builtin.service:
    name: domino
    state: stopped
    enabled: true

-
  name: "Copying App Dev Pack Templates and Files"
  ansible.builtin.copy:
    mode: '0644'
    src: "{{ item }}"
    dest: "{{ service_home_dir }}"
    remote_src: true
    owner: "{{ service_user }}"
  with_items:
    - "{{ installer_dir }}/appdevpack/domino-appdev-pack/adpconfig.ntf"
    - "{{ installer_dir }}/appdevpack/domino-appdev-pack/iam-store.ntf"
    - "{{ installer_dir }}/appdevpack/domino-appdev-pack/1202-proton-addin-0.15.5+ND12000200.tgz"
  when: not appdevpack_installed_check.stat.exists

-
  name: "Extracting domino-appdev-pack from {{ appdevpack_archive }}"
  when: not appdevpack_installed_check.stat.exists
  ansible.builtin.unarchive:
    mode: "a+x"
    owner: "{{ domino_user }}"
    group: "{{ domino_group }}"
    src: "{{ installer_dir }}/appdevpack/domino-appdev-pack/1202-proton-addin-0.15.5+ND12000200.tgz"
    dest: "/opt/hcl/domino/notes/latest/linux"
    creates: "/opt/hcl/domino/notes/latest/linux/libiamclient.so"
    remote_src: true

-
  name: "Installing domino-appdev-pack"
  when: not appdevpack_installed_check.stat.exists
  ansible.builtin.shell: "{{ item }}"
  become: true
  args:
    executable: "/bin/bash"
    chdir: "/opt/hcl/domino/notes/latest/linux"
  with_items:
    - sh -v ./setup_proton.sh

-
  name: "Setting domino-appdev-pack as installed"
  when: not appdevpack_installed_check.stat.exists
  ansible.builtin.file:
    mode: '0644'
    path: "{{ item }}"
    state: touch
  with_items:
    - "{{ completed_dir }}/appdevpack_install"

-
  name: "Starting Domino"
  when: not appdevpack_installed_check.stat.exists
  become: true
  ansible.builtin.service:
    name: domino
    state: started
    enabled: true
