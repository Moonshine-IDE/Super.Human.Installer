name: SUB - Build on Linux

on:
  workflow_dispatch:
    inputs:
      env:
        description: "An Environment"
        required: true
        type: choice
        options:
          - Development
          - Production
      version:
        description: "A Version"
        required: true
        type: string
      caching:
        description: "Use caching"
        required: true
        type: boolean
        default: false

  workflow_call:
    inputs:
      env:
        description: "An Environment"
        required: true
        type: string
      version:
        description: "A Version"
        required: true
        type: string
      caching:
        description: "Use caching"
        required: true
        type: boolean
        default: false

env:
  app_name: ${{ inputs.env == 'Production' && 'SuperHumanInstaller' || 'SuperHumanInstallerDev' }}
  app_id: net.prominic.genesis.${{ inputs.env == 'Production' && 'superhumaninstaller' || 'superhumaninstallerdev' }}
  haxe_flag: ${{ inputs.env == 'Production' && '-final' || '-debug -Dverbose_logs -Ddebug_logs' }}
  haxe_version: 4.3.7
  bin_path: Export/${{ inputs.env }}/linux/bin

jobs:
  build:
    runs-on: [self-hosted, linux]

    steps:
      - name: Build info
        run: |
          echo "Ref: ${{ github.ref_name }}"
          echo "Env: ${{ inputs.env }}"
          echo "Version: ${{ inputs.version }}"
          echo "App Name: ${{ env.app_name }}"
          echo "App ID: ${{ env.app_id }}"
          echo "Haxe Env Flag: ${{ env.haxe_flag }}"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Override project.xml version
        uses: Moonshine-IDE/xml-replace-action@v2.0
        with:
          filepath: "project.xml"
          xpath: "/project/meta/@version"
          replace: "${{ inputs.version }}"

      - name: Install missing system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libxinerama-dev libxrandr-dev mesa-common-dev libasound2-dev gcc-multilib g++-multilib libfuse2

      -
        name: "Setting up Haxe"
        uses: MarkProminic/setup-haxe-action@master
        with:
          haxe-version: ${{ env.haxe_version }}
          download-timeout: 120000
          max-retries: 10
          retry-delay: 10000

      - name: Show haxe info
        run: |
          echo "Haxe version:"
          haxe -version
          echo "Haxe lib path:"
          haxelib config

      - name: Update haxelib
        run: haxelib --global update haxelib

      - name: Cache Binaries
        id: cache-bin
        if: ${{ inputs.caching }}
        uses: actions/cache@v4
        with:
          path: ${{ env.bin_path }}
          key: ${{ env.app_name }}-linux-bin

      - name: Install dependencies
        if: ${{ !inputs.caching || !steps.cache-bin.outputs.cache-hit }}
        working-directory: Build
        run: |
          haxelib git hxcpp https://github.com/HaxeFoundation/hxcpp.git v4.3.89
          pushd .
          cd ~/SuperHumanInstaller-runner/_work/_tool/haxe/${{env.haxe_version}}/x64/lib/hxcpp/git/tools/hxcpp
          haxe compile.hxml
          cd ../build/
          haxe compile.hxml
          popd
          haxelib install lime 8.2.2
          haxelib install format
          haxelib install hxp
          haxelib git yaml https://github.com/Sword352/hx-yaml master
          haxelib git lime-samples https://github.com/openfl/lime-samples
          haxelib install openfl 9.4.1
          haxelib run openfl setup
          haxelib git feathersui https://github.com/feathersui/feathersui-openfl.git
          haxelib git champaign https://github.com/Moonshine-IDE/Champaign.git      
          haxelib git mxhx-component https://github.com/mxhx-dev/mxhx-component.git
          haxelib git mxhx-feathersui https://github.com/mxhx-dev/mxhx-feathersui.git

      - name: List dependencies
        run: haxelib list

      - name: Build
        if: ${{ !inputs.caching || !steps.cache-bin.outputs.cache-hit }}
        run: >
          haxelib run openfl build project.xml linux 
          ${{ env.haxe_flag }} 
          -Dlogverbose 
          -Dlogcolor 
          -Dgitsha=${{ github.sha }} 
          -Dgitbranch=${{ github.ref_name }}

      - name: Show Build
        run: tree ${{ env.bin_path }}

      - name: Upload bin
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: ${{ env.app_name }}-linux-bin
          path: ${{ env.bin_path }}
          
      - name: "Uploading bin to prominic.net"
        run: |
          echo "Uploading bin to https://public-artifacts.prominic.net/Super.Human.Installer/${{ inputs.version }}/${{ env.app_name }}-linux-bin"
          ssh startcloud@public-artifacts.prominic.net "mkdir -p /local/www/Super.Human.Installer/${{ inputs.version }}"
          rsync -avz ${{ env.bin_path }}/ startcloud@public-artifacts.prominic.net:/local/www/Super.Human.Installer/${{ inputs.version }}/${{ env.app_name }}-linux-bin

      - name: Create AppImage
        uses: Moonshine-IDE/create-appimage-action@main
        with:
          app-name: ${{ env.app_name }}
          app-version: ${{ inputs.version }}
          app-icon-name: icon
          app-categories: Utility
          bin-paths: ${{ env.bin_path }}/*
          appdir-paths: Assets/icon.png
          lib-paths:
          share-paths:
          output-path: Build/${{ env.app_name }}-x86_64.AppImage

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: ${{ env.app_name }}-linux-installer
          path: Build/${{ env.app_name }}-x86_64.AppImage
          if-no-files-found: error
          
      - name: "Uploading AppImage to prominic.net"
        run: |
          echo "Uploading AppImage to https://public-artifacts.prominic.net/Super.Human.Installer/${{ inputs.version }}/${{ env.app_name }}-x86_64.AppImage"
          ssh startcloud@public-artifacts.prominic.net "mkdir -p /local/www/Super.Human.Installer/${{ inputs.version }}"
          rsync -avz Build/${{ env.app_name }}-x86_64.AppImage startcloud@public-artifacts.prominic.net:/local/www/Super.Human.Installer/${{ inputs.version }}/${{ env.app_name }}-x86_64.AppImage
